---

    # The git group in use on some servers is not in Ansible yet so only append.
    - name: remove extra groups for locked users
      action: user name={{item}} groups=
      with_items: locked_users
      when: locked_users is defined

    - name: remove authorized key(s) from root for locked users
      authorized_key: user=root key="{{ lookup('file', user_management_ssh_keys_path ~ users[item].public_key ) }}" state=absent
      with_items: locked_users
      when: locked_users is defined and users[item].public_key is defined

    - name: disable password for locked account
      user: name={{item}} password=!
      with_items: locked_users
      when: locked_users is defined

    - name: remove additional authorized key(s) from root for locked users
      authorized_key: user=root key="{{ lookup('file', user_management_ssh_keys_path ~ users[item].additional_public_key ) }}" state=absent
      with_items: locked_users
      when: locked_users is defined and users[item].additional_public_key is defined

    - name: remove authorized key(s) from account for locked users
      authorized_key: user={{item}} key="{{ lookup('file', user_management_ssh_keys_path ~ users[item].public_key ) }}" state=absent
      with_items: locked_users
      when: locked_users is defined and users[item].public_key is defined

    - name: remove additional authorized key(s) from account for locked users
      authorized_key: user={{item}} key="{{ lookup('file', user_management_ssh_keys_path ~ users[item].additional_public_key ) }}" state=absent
      with_items: locked_users
      when: locked_users is defined and users[item].additional_public_key is defined
